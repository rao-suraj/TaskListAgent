requirement_generation_task:
  description: >
    Create a detailed Product Requirements Document and Technical Requirements Document for human input
    <human_input>
    {user_input}
    </human_input>
    <instructions>
    1. Ask Human relevant questions for getting all the details that a good Product Requirements Document and Technical Requirements Document should have.
    2. Make sure you have all the details required for creating a Software Design Document and Development Workflow Plan and Order of Execution.
    </instructions>
  expected_output: >
    Product Requirements Document and Technical Requirements Document.
    <product_requirements_document_structure>
    Project Overview
      Purpose: Why are we building this?
      Example: "Create a phone usage tracking app to help users monitor and manage their screen time."
    Goals and Objectives
      Desired outcomes from a business perspective.
      Example: "Help users understand their phone habits and reduce excessive screen time."
    Stakeholders
      Who's involved or benefits.
      Example: "Target users: Phone owners; Client: App owner seeking usage insights."
    User Stories
      Simple needs from the user's view.
      Example: "As a user, I want to see how much time I spend on apps daily so I can manage my usage."
    Functional Requirements
      What the app should do (no tech details).
      Example:
        "Show daily phone usage by app."
        "Let users set time limits and get alerts."
    Non-Functional Requirements
      General quality expectations.
      Example:
        "App should be easy to use."
        "Should work on most modern phones."
    Assumptions and Constraints
      High-level limits or conditions.
      Example: "Assumes users allow access to usage data; focused on one phone platform initially."
    </product_requirements_document_structure>
    <technical_requirements_document_structure>
     Tech Stack
      Required technologies for the project.
      Example: "Frontend: React Native; Backend: Node.js; Database: MongoDB."
      Example: "Frontend: Decide base on requirement; Backend: Django; Database: MySQL."
     Third-Party Services
      External tools or APIs needed.
      Example: "Google Firebase for push notifications."
      Example: "CAMS and karvy for eKyc and Mutual Fund Details."
    </technical_requirements_document_structure>
  agent: business_analyst

execution_plannig_task:
  description: >
    Understand the Product Requirements Document and Technical Requirements Document you got from the context (OUTPUT OF requirement_generation_task)
    for human input
    <human_input>
    {user_input}
    <human_input>
    <instructions>
    1. Make sure that Development Workflow has detaied execution plan. Including detailed execution by specifying third party services, tech stack and other details.
    </instructions>
  expected_output: >
    Software Design Document, Development Workflow Plan and Order of execution 
    <software_design_document_structure>
    Project Overview: Purpose and goals 
      Example:"Track phone usage time to reduce screen time"
    Architecture: High-level system design 
      Example:"Frontend: React Native; Backend: Node.js"
    Modules: Key components and their functions 
      Example: "Usage tracking module: Query and store app usage data"
    API: List of Api that needs to be created.
      Example: - **POST /api/transactions:** Add a new transaction.
               - **GET /api/transactions:** Retrieve all transactions.
               - **GET /api/reports:** Generate and retrieve reports.
    You can add sections based on the type of project.
    </software_design_document_structure>
    <development_workflow_plan_structure>
    Feature Overview: What the component does (e.g., "Track phone usage time").
    Tech Stack: Tools/APIs/Third party services per layer (e.g., "Android UsageStatsManager API - Frontend, SQLite - Backend", BSE API - For getting Fund Details & Purchase).
    Execution Process: Ordered steps with Frontend/Backend labels and effort estimates:
    Step 1: Query usage data via Android API
    Step 2: Store data locally in SQLite 
    Step 3: Sync data to backend via REST API
    Dependencies: Whats needed first (e.g., "Android permissions setup").
    Assumptions/Risks: Clarify limits (e.g., "No backend API for usage tracking; relies on Android API").
    for all modules and features mentioned in the Software Design Document.
    </development_workflow_plan_structure>
    <order_of_execution_structure>
    A logical sequence of tasks  
      Example:"Set up database schema before building API endpoints"
    Dependencies between tasks 
      Example:"Authentication module must be completed before user profile API"
    Milestones or phases 
      Example:"Backend completion â†’ Frontend integration"
    </order_of_execution_structure>
  agent: developer
  context: ["requirement_generation_task"]

task_list_creation_task:
  description: >
    Use the Software Design Document, Development Workflow Plan and Order of execution from the context (OUTPUT OF execution_plan_task) provided to you for human input 
    <human_input>
    {user_input}
    </human_input> 
    and create a task list using which developers can execute the project and deliver it on time.
  expected_output: >
    Task list for the project.
    <task_list_structure>
    ### Task list for [App Name]
      #### [Department Name]
        1. **[Module Name]**
           - *[Task Name]*: [Task Description]
              *[Sub Task Name]*: [Task Description]
              *[Sub Task Name]*: [Task Description]
              *[Sub Task Name]*
        2. **[Module Name]**
           - *[Task Name]*: [Task Description]
              *[Sub Task Name]*: [Task Description]
              *[Sub Task Name]*: [Task Description]
              *[Sub Task Name]*
    </task_list_structure>
  agent: project_manager
  context: ["execution_plannig_task"]
